# AuditLogEntry action handlers old not used
async def app_command_permission_update(bot: discord.Client, guild: discord.Guild, entry: discord.AuditLogEntry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def automod_block_message(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def automod_flag_message(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def automod_timeout_member(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def automod_rule_create(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def automod_rule_delete(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def automod_rule_update(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def ban(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        entry.target = await generic_object_converter(bot, guild, entry)
    else:
        entry.target = f'**{entry.target.name}** `{entry.target.id}`'

    user = entry.user
    action = audit_log_action_descriptions[entry.action]
    target = f'{entry.target.mention} `{entry.target}`'

    return AuditLogEntryLogMessage(user=user, action=action, target=target)

async def unban(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        entry.target = await generic_object_converter(bot, guild, entry)
    else:
        entry.target = f'**{entry.target.name}** `{entry.target.id}`'

    user = entry.user
    action = audit_log_action_descriptions[entry.action]
    target = f'{entry.target.mention} `{entry.target}`'

    return AuditLogEntryLogMessage(user=user, action=action, target=target)

async def kick(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        entry.target = await generic_object_converter(bot, guild, entry)
    else:
        entry.target = f'**{entry.target.name}** `{entry.target.id}`'

    user = entry.user
    action = audit_log_action_descriptions[entry.action]
    target = f'{entry.target.mention} `{entry.target}`'

    return AuditLogEntryLogMessage(user=user, action=action, target=target)

async def member_prune(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        entry.target = await generic_object_converter(bot, guild, entry)
    else:
        entry.target = f'**{entry.target.name}** `{entry.target.id}`'

    user = entry.user
    action = audit_log_action_descriptions[entry.action]
    target = entry.target # number of members pruned

    return AuditLogEntryLogMessage(user=user, action=action, target=target)

async def bot_add(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def channel_create(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        entry.target = await generic_object_converter(bot, guild, entry)
    else:
        entry.target = f'**{entry.target.name}** `{entry.target.id}`'

    user = entry.user
    action = audit_log_action_descriptions[entry.action].formate(entry.target.type)
    target = entry.target

    return AuditLogEntryLogMessage(user=user, action=action, target=target)

async def channel_delete(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def channel_update(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def emoji_create(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def emoji_delete(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def emoji_update(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def guild_update(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def integration_create(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def integration_delete(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def integration_update(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def invite_create(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def invite_delete(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def invite_update(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def member_update(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def member_move(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def member_disconnect(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def member_role_update(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def message_bulk_delete(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def message_delete(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def message_pin(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def message_unpin(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def overwrite_create(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def overwrite_delete(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def overwrite_update(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def role_create(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def role_delete(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def role_update(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def scheduled_event_create(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def scheduled_event_delete(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def scheduled_event_update(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def stage_instance_create(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def stage_instance_delete(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def stage_instance_update(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def sticker_create(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def sticker_delete(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def sticker_update(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def thread_create(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def thread_delete(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def thread_update(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def webhook_create(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def webhook_delete(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)

async def webhook_update(bot, guild, entry):
    if isinstance(entry.target, discord.object.Object):
        target = await generic_object_converter(bot, guild, entry)
    else:
        target = f'**{entry.target.name}** `{entry.target.id}`'

    return AuditLogEntryLogMessage(user=entry.user, action=audit_log_action_descriptions[entry.action], target=target)
